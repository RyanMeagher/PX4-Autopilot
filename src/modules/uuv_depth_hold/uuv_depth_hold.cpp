#include <px4_platform_common/px4_config.h>
#include <px4_platform_common/tasks.h>
#include <px4_platform_common/posix.h>
#include <unistd.h>
#include <stdio.h>
#include <poll.h>
#include <string.h>
#include <math.h>

// system libraries
#include <parameters/param.h>
#include <systemlib/err.h>
#include <perf/perf_counter.h>

// internal libraries
#include <lib/mathlib/mathlib.h>
#include <matrix/math.hpp>
#include <lib/ecl/geo/geo.h>

// Include uORB and the required topics for this app
#include <uORB/uORB.h>
#include <uORB/topics/vehicle_acceleration.h>                // this topics hold the acceleration data
#include <uORB/topics/actuator_controls.h>              // this topic gives the actuators control input
#include <uORB/topics/vehicle_attitude.h>
#include <uORB/topics/sensor_baro.h>

extern "C" __EXPORT int uuv_depth_hold_main(int argc, char *argv[]);
float desired_depth=0.3f;
float actual_depth;

int uuv_depth_hold_main(int argc, char *argv[]){

    PX4_INFO("UUV depth hold activated");

    //setup file_descripters to poll desired topics
    int vehicle_attitude_sub_fd = orb_subscribe(ORB_ID(vehicle_attitude));
    int sensor_baro_sub_fd = orb_subscribe(ORB_ID(sensor_baro));

    // limit the update rate to 5Hz
    orb_set_interval(vehicle_attitude_sub_fd,200);
    orb_set_interval(sensor_baro_sub_fd,200);


    //publish actuator
    struct actuator_controls_s act;
    memset(&act, 0, sizeof(act));
    orb_advert_t act_pub = orb_advertise(ORB_ID(actuator_controls_0), &act);

    /* one could wait for multiple topics with this technique, just using one here */
    px4_pollfd_struct_t fds[2] = {};
    fds[0].fd = sensor_baro_sub_fd;
    fds[0].events = POLLIN;
    fds[1].fd = vehicle_attitude_sub_fd;
    fds[1].events = POLLIN;

    int error_counter = 0;

    for (int i = 0; i < 10; i++) {
        /* wait for sensor update of 1 file descriptor for 1000 ms (1 second) */
        int poll_ret = px4_poll(fds, 1, 1000);

        /* handle the poll result */
        if (poll_ret == 0) {
            /* this means none of our providers is giving us data */
            PX4_ERR("Got no data within a second");

        } else if (poll_ret < 0) {
            /* this is seriously bad - should be an emergency */
            if (error_counter < 10 || error_counter % 50 == 0) {
                /* use a counter to prevent flooding (and slowing us down) */
                PX4_ERR("ERROR return value from poll(): %d", poll_ret);
            }

            error_counter++;

        } else {

            if (fds[0].revents & POLLIN) {
                /* obtained data for the first file descriptor */
                sensor_baro_s sensor{};
                /* copy sensors raw data into local buffer */
                orb_copy(ORB_ID(sensor_baro), sensor_baro_sub_fd, &sensor);
                // printing the sensor data into the terminal
                PX4_INFO("Current Depth:\t%8.4f",
                         (double)sensor.depth);
                actual_depth=sensor.depth;

                /* obtained data for the third file descriptor */
                vehicle_attitude_s raw_ctrl_state{};
                /* copy sensors raw data into local buffer */
                orb_copy(ORB_ID(vehicle_attitude), vehicle_attitude_sub_fd, &raw_ctrl_state);

                // get current rotation matrix from control state quaternions, the quaternions are generated by the
                // attitude_estimator_q application using the sensor data
                matrix::Quatf q_att(raw_ctrl_state.q);     // control_state is frequently updated
                matrix::Dcmf R = q_att; // create rotation matrix for the quaternion when post multiplying with a column vector

                // orientation vectors
                matrix::Vector3f x_B(R(0, 0), R(1, 0), R(2, 0));     // orientation body x-axis (in world coordinates)
                matrix::Vector3f y_B(R(0, 1), R(1, 1), R(2, 1));     // orientation body y-axis (in world coordinates)
                matrix::Vector3f z_B(R(0, 2), R(1, 2), R(2, 2));     // orientation body z-axis (in world coordinates)

                PX4_INFO("x_B:\t%8.4f\t%8.4f\t%8.4f",
                         (double)x_B(0),
                         (double)x_B(1),
                         (double)x_B(2));

                PX4_INFO("y_B:\t%8.4f\t%8.4f\t%8.4f",
                         (double)y_B(0),
                         (double)y_B(1),
                         (double)y_B(2));

                PX4_INFO("z_B:\t%8.4f\t%8.4f\t%8.4f \n",
                         (double)z_B(0),
                         (double)z_B(1),
                         (double)z_B(2));
            }
        }

        if(desired_depth > actual_depth && (abs(desired_depth-actual_depth) > 0.2)){
            act.control[0] = 0.0f;      // roll
            act.control[1] = -1.0f;      // pitch
            act.control[2] = 0.0f;		// yaw
            act.control[3] = 0.0f;		// thrust
        }
        else if ( (desired_depth < actual_depth) && (abs(desired_depth-actual_depth) > 0.2) ){
            act.control[0] = 0.0f;      // roll
            act.control[1] = 1.0f;      // pitch
            act.control[2] = 0.0f;		// yaw
            act.control[3] = 0.0f;		// thrust
        }
        else if ( (desired_depth < actual_depth) && (abs(desired_depth-actual_depth) < 0.2) ){
            act.control[0] = 0.0f;      // roll
            act.control[1] = 0.25f;      // pitch
            act.control[2] = 0.0f;		// yaw
            act.control[3] = 0.0f;		// thrust
        }
        else if ( (desired_depth < actual_depth) && (abs(desired_depth-actual_depth) < 0.2) ){
            act.control[0] = 0.0f;      // roll
            act.control[1] = 0.25f;      // pitch
            act.control[2] = 0.0f;		// yaw
            act.control[3] = 0.0f;		// thrust
        }
        orb_publish(ORB_ID(actuator_controls_0), act_pub, &act);

    }


    PX4_INFO("Exiting uuv_example_app!");
    return EXIT_SUCCESS;

}


